#ifndef CBPM_TYPES_A_H
#define CBPM_TYPES_A_H

//------------------------------------------------------------------------
//  D O     N O T     E D I T     T H I S     F I L E
//------------------------------------------------------------------------
// File         :  cbpm_types_a.h
// Date Created :  Fri Sep 14 14:08:01 2012
//
// Description  :  This file was automatically generated by the BIParser.
//                 It defines the collection of communication data 
//                 structures available for the given platform(s).
//------------------------------------------------------------------------
//
//-----------------------------------------------------------------------+
//  The following provides for C++ compatibility (ie, C++ routines can   |
//  explicitly use this include file).                                   |
//-----------------------------------------------------------------------+
#if defined (__cplusplus)
extern "C" {
#endif


#define CBPM_COMM_STRUCT_REV  1209141408

//-----------------------------------------------------------------------+
// Set CONTROL SYSTEM flag                                               |
//-----------------------------------------------------------------------+
#if defined (CESR_VMS) || defined(CESR_UNIX)
#define INST_CONTROL
#if defined(INST_COMMUNICATIONS)
#define INST_DEFINE_CONFIG
#endif
#endif

#include "cbi_constants.h" 
#include "cbi_types_a.h"
//================================================================


#include "cbpm_constants.h"


//-----------------------------------------------------------------------+
// CMD_PARAMS - This struct is used to set and retrieve command          |
//              options and status.                                      |
//                                                                       |
//                                                                       |
// species         : species flag                                        |
//                                                                       |
// num_turns       : Number of turns of raw data per sample              |
//                                                                       |
// trig_turns_delay : Number of turns to wait after the trigger signal   |
//                    before starting to acquire data                    |
//                                                                       |
// spacex_turn     : Number of turns gap between each raw data point     |
//                                                                       |
// delay_cal       : Flag indicating whether to re-time the DSP for the  |
//                   specified bunch                                     |
//                                                                       |
// gain_cal        : Flag indicating whether gains can be changed        |
//                                                                       |
// generate_delay_corrections:  Instructs the instrument to perform      |
//                              curve fits on channel calibration data   |
//                              structure, generate new channel delays,  |
//                              apply them to the timing registers, and  |
//                              update the delay structure for reading.  |
//                                                                       |
// gain_xcal       : Flag to indicate whether gain coefficients should   |
//                   be cross-calibrated when passing through a gain     |
//                  transition.                                          |
//                                                                       |
// scale_mode      : Flag indicating whether ADC data should be scaled   |
//                   by the proper gain coefficient or be left as raw    |
//                   ADC values.                                         |
//                                                                       |
// update_mode     : Flag indicating whether calibration data should be  |
//                  transferred to the relevant configuration struct     |
//                                                                       |
// use_data_enable : Flag indicating whether to use the global data      |
//                   enable command bit provided via CESR turns marker   |
//                   timing signal                                       |
//                                                                       |
// trig_mask       : Mask indicating which hardware trigger channel to   |
//                   trigger on                                          |
//                                                                       |
// checksum        : Checksum for the parameter struct                   |
//                                                                       |
// bunch_pat       : Provided by control side to describe what the bunch |
//                   pattern to collect should look like relative to     |
//                   "train 1, bunch 1" in first position.               |
//                                                                       |
// rot_bunch_pat   : Array of ints that holds the ROTATED bunch pattern  |
//                   for a particular BPM such that the first bit        |
//                   corresponds to the first bunch to arrive after the  |
//                   turn marker, which may or may not be T1B1.  A       |
//                   routine is provided on the DSP to make this         |
//                   calculation and populate this array.  This is what  |
//                   gets loaded into the bunch pattern REGISTERS in the |
//                   BPM itself.                                         |
//                                                                       |
// timing_mode     : Used only when setting the bunch spacing config.    |
//                   Functionality provided by the Set Bunch Spacing     |
//                   action.  (4=4ns, 14=14ns)                           |
//-----------------------------------------------------------------------+
typedef struct {
      int species;
      int num_turns;
      int bunch_pat[40];     //format(HEX)
      int rot_bunch_pat[640];           // Move to raw_data_header?  All acquisitions will have a rotated pattern.
      int trig_turns_delay;
      int spacex_turn;
      int delay_cal;
      int generate_delay_corrections;
      int gain_cal;
      int gain_xcal;
      int avg_mode;
      int scale_mode;
      int update_mode;
      int use_data_enable;
      int trig_mask;
      int reset_proc_buf_idx;
      int generate_phase_tables;
      int tblock;             // Only used for lower-level block-specific operations during time-in process.
      int bun_pat_offset;     // FIXME MOVE: Read back to be used in control-side find_bunch, check implications.
      int checksum;
} CBPM_CMD_PARAMS;




//-----------------------------------------------------------------------+
// TEMPERATURES  - Holds the values of the full complement of            |
//                 temperature sensors present on the instrument..       |
//                                                                       |
//                                                                       |
// dig_temp : Temperature provided by the digital board sensor           |
// tim_temp : Temperature provided by the timing board sensor            |
// fe_temps : Array of temperatures provided by the front-end boards     |
//-----------------------------------------------------------------------+
typedef struct {
	float dig_temp;
	float tim_temp;
	float fe_temps[CBPM_MAX_CARDS];
} CBPM_TEMPERATURES;




//-----------------------------------------------------------------------+
// TIMING_CONFIG - Aggregate structure.  Holds an array of the           |
//                 TIMING_SETUP structures.  Each entry has space for    |
//                 parameters associated with one unique 'timing setup'. |
//                                                                       |
//    --------------------------------------------------------------     |
//                                                                       |
// TSETUP  - Holds a single, self-consistent set of timing parameters    |
//            for one 'timing setup'                                     |
//                                                                       |
// timing_mode  : Integer code specifying the timing mode to use when    |
//                configuring the instrument's timing board clock freq.  |
// cTMD         : Common turns marker delay                              |
// BP_offsets   : Used to set instrument's bunch pattern rotation        |
//                offsets  One per timing block.                         |
// bTMDs        : Block turns marker delays (one per timing block)       |
// block_delays : Block (global) signal delays for each timing block.    |
//                This is the sum of two values, one for each of two     |
//                serially-connected delay chips.                        |
// chan_delays  : Channel signal delays for each channel on each card in |
//                each timing block.                                     |
//-----------------------------------------------------------------------+
typedef struct {
        int timing_mode;
        int cTMD;
        int BP_offsets[CBPM_MAX_TIMING_BLOCKS];
        int bTMDs[CBPM_MAX_TIMING_BLOCKS];
        int block_delays[CBPM_MAX_TIMING_BLOCKS];
	int chan_delays[CBPM_MAX_TIMING_BLOCKS][CBPM_MAX_CARDS];
} CBPM_TSETUP;



typedef struct {
        CBPM_TSETUP  setups[CBPM_MAX_TIMING_SETUPS];
} CBPM_TIMING_CONFIG;




//-----------------------------------------------------------------------+
// GAIN_CONFIG - This struct is used to pass gain settings and           |
//               parameters between the BPM module and the control       |
//               system                                                  |
//                                                                       |
//                                                                       |
// gain_codes     : The actual bit patterns needed to set the hardware's |
//                  signal gain for each available gain setting.         |
//                                                                       |
// gain_table     : Arrays of gain scale factors for each gain setting,  |
//                  and each amplifier on each timing block.             |
//                                                                       | 
// gain_err_table : Statistical cross-calibration error table for gain   |
//                  coefficients                                         |
//                                                                       | 
// ped_table     :  Table of channel pedestals (amplitude offsets with   |
//                  zero input signal) for each card in each timing      |
//                  block and setting.                                   |
//                                                                       |
// ped_rms_table :  RMS values calculated over some number of turns      |
//                  during the acquisition of the above pedestal values. |
//                                                                       |
// chan_map      :  Channel mapping table to allow for software-based    |
//                  cable-order corrections.                             |
//-----------------------------------------------------------------------+
typedef struct {
      int    gain_codes[CBPM_MAX_GAINS]; 
      float  gain_table[CBPM_MAX_TIMING_BLOCKS][CBPM_MAX_CARDS][CBPM_MAX_GAINS];
      float  gain_err_table[CBPM_MAX_TIMING_BLOCKS][CBPM_MAX_CARDS][CBPM_MAX_GAINS];
      int    chan_map[CBPM_MAX_CARDS];
} CBPM_GAIN_CONFIG;





//-----------------------------------------------------------------------+
// PEDESTAL_CONFIG - Holds a an array of PEDESTALS structs, one for each |
//                   supported combination timing setup.  Each table     |
//                   holds pedestal values for all settings in each gain |
//                   mode.  In this case, the 0 entries are for FIXED    |
//                   gain and the rest of the entries are for VARIABLE   |
//                   gain settings.  Thus, the total number of tables is |
//                   (# TIMING SETUPS) / (# GAIN MODES).  Due to current |
//                   BIParser limitations, this is manually calculated   |
//                   and defined as a separate named constant called     |
//                   CBPM_MAX_MULTIGAIN_SETUPS.                          |
//                                                                       |
//    --------------------------------------------------------------     |
//                                                                       |
// PEDESTALS       - For a single timing setup, holds the pedestal and   |
//                   pedestal RMS tables for each timing-block, each     |
//                   card, and each channel on those cards.              |
//-----------------------------------------------------------------------+
typedef struct {
      float  ped_table[CBPM_MAX_TIMING_BLOCKS][CBPM_MAX_CARDS][CBPM_MAX_GAINS];
      float  ped_rms_table[CBPM_MAX_TIMING_BLOCKS][CBPM_MAX_CARDS][CBPM_MAX_GAINS];
} CBPM_PEDESTALS;



typedef struct {
        CBPM_PEDESTALS  tables[CBPM_MAX_MULTIGAIN_SETUPS];
} CBPM_PEDESTAL_CONFIG;




//-----------------------------------------------------------------------+
// OP_TIMING - Operating timing and gain indexing struct.  This struct   |
//             holds the enum-label value of the currently active timing |
//             setup for the instrument.                                 |
//                                                                       |
// active_timing_setup  : Value signifying the active timing setup       |
//-----------------------------------------------------------------------+
typedef struct {
      int    active_timing_setup;
} CBPM_OP_TIMING;



//-----------------------------------------------------------------------+
// OP_GAIN - Operating gain indexing struct.  This struct holds the      |
//           currently active gain index (gain setting) for each channel |
//           (ADC) on the instrument.  These are used to look up the     |
//           appropriate gain codes, gain coefficients, and pedestal     |
//           values in the_GAIN_CONFIG structure.                        |
//                                                                       |
// active_gain_settings : One index for each available channel (ADC)     |
//-----------------------------------------------------------------------+
typedef struct {
      int    active_gain_settings[CBPM_MAX_CARDS][CBPM_MAX_TIMING_BLOCKS];
} CBPM_OP_GAIN;




//-----------------------------------------------------------------------+
// RAW_DATA_HEADER - Used to pass information about the results of a raw |
//                  data acquisition.                                    |
//                                                                       |
//                                                                       |
// tot_bunches  : Total number of bunches for which data were acquired.  |
//                                                                       |
// num_bunches  : Number of bunches to sample on each timing block       |
//                                                                       |
// num_BP_bits_wrapped : Number of bunch pattern bits that need to       |
//                       'wrap' back to the beginning of the bunch       |
//                       pattern bit array due to the length of bunch    |
//                       pattern requested and the bunch pattern offset. |
//                                                                       |
// num_turns    : Number of turns recorded in buffer                     |
//                                                                       |
// skip_turns_active : Boolean, shows whether or not the front-end FPGA  |
//                     "skip-turns" feature has been activated based on  |
//                     the product of bunches and turns requested to     |
//                     ensure correct delivery of data to the digitizer  |
//                     buffers.                                          |
//                                                                       |
// turn_counter : The turn number of the first data sample of the raw    |
//                data acquisition.                                      |
//                                                                       |
// scale_mode   : Wether or not pedestal subtractions and gain           |
//                corrections applied during any on-board data           |
//                processing.                                            |
//                                                                       |
// trig_turns_delay : Number of turns delay requested from the arrival   |
//                    an external trigger signal to the acquisition of   |
//                    the first ADC value.                               |
//                                                                       |
// spacex_turn  : Spacing (in turns) between ADC samples                 |
//                                                                       |
// ADC_zero_val_bitfields  : 32-bits per card of status, Interleaved     |
//                             by timing block for extensibility.        |
// ADC_lower_thresh_bitfields : 32-bits per card of status info similarly|
//                             interleaved. - used for time scan         |
// ADC_low_thresh_bitfields : 32-bits per card of status info similarly  |
//                             interleaved.                              |
// ADC_high_thresh_bitfields : " "                                       |
//                                                                       |
// ADC_saturation_bitfields  : " "                                       |
//                                                                       |
// gain         : The gain that was used during the acquisition          |
//-----------------------------------------------------------------------+
typedef struct {
      int tot_bunches;
      int num_bunches[CBPM_MAX_TIMING_BLOCKS];
      int num_BP_bits_wrapped[CBPM_MAX_TIMING_BLOCKS];
      int num_turns;
      int skip_turns_active;
      int turn_counter;
      int trig_turns_delay;
      int spacex_turn;
      int scale_mode;
      int ADC_zero_val_bitfields[CBPM_MAX_CARDS];
      int ADC_lower_thresh_bitfields[CBPM_MAX_CARDS];
      int ADC_low_thresh_bitfields[CBPM_MAX_CARDS];
      int ADC_high_thresh_bitfields[CBPM_MAX_CARDS];
      int ADC_saturation_bitfields[CBPM_MAX_CARDS];
      int gain[CBPM_MAX_CARDS][CBPM_MAX_TIMING_BLOCKS];
} CBPM_RAW_DATA_HEADER;




//-----------------------------------------------------------------------+
// ADC_BUFFER - Used to facilitate access of the ADC buffer memory that  |
//              lives on the instrument's front-end cards.  There is one |
//              buffer for each of channel on each card.  For BPMs, this |
//              results in a total of eight (8) structures.  One         |
//              defintion is made here since the data itself is          |
//              organized identically in each buffer.                    |
//                                                                       |
//                                                                       |
//  The 'multi' flag controls the spawning of the required number of     |
//  instances of the structure.                                          |
//                                                                       |
//  The 'use_segments' flag instructs the parser to generate code that   |
//  places each buffer structure instance into the appropriate memory    |
//  segment in the instrument's address space.                           |
//                                                                       |
//  The exact names of the pre-defined memory segments to use (see the   |
//  instrument code project's .LDF file) are referenced at the top of    |
//  this file in a portion of the '!!' header.                           |
//                                                                       |
// raw_data : Array allowing the transfer of the contents of a single    |
//            ADC buffer's contents.                                     |
//-----------------------------------------------------------------------+
typedef struct {
        int raw_data[CBPM_ADC_BUF_USE];
} CBPM_ADC_BUFFER;




//-----------------------------------------------------------------------+
// PH_WORD_BUF - Used for buffering many turns worth of phase word data  |
//               that is extracted from the timing signal's data word    |
//               encoded alongside the 'turns marker'.                   |
//                                                                       |
//                                                                       |
//  The 'use_segments' flag instructs the parser to generate code that   |
//  places each buffer structure instance into the appropriate memory    |
//  segment in the instrument's address space.                           |
//                                                                       |
//  The exact names of the pre-defined memory segments to use (see the   |
//  instrument code project's .LDF file) are referenced at the top of    |
//  this file in a portion of the '!!' header.                           |
//                                                                       |
//  The 'mp_space' flag controls whether or not a MULTIPROCESSOR SPACE   |
//  memory offset is needed for accessing the address space specified by |
//  the segment indicated as an argument of the 'use_segments' flag.     |
//                                                                       |
//  The flag is 'NO' in this case because the phase word buffer is       |
//  configured to exist in the SRAM installed on the digital board,      |
//  the addressing of which requires that no multiprocessor offset be    |
//  used.                                                                |
//                                                                       |
//    See description of multiprocessor space addressing in the          |
//    TigerSHARC programming reference for more detailed information.    |
//                                                                       |
//  ph_words  :  Array used to hold one phase data word per entry (turn) |
//-----------------------------------------------------------------------+
typedef struct {
        int ph_words[CBPM_ADC_BUF_USE];
} CBPM_PH_WORD_BUF;




//-----------------------------------------------------------------------+
// PROC_BUF - This struct is used to pass results from many              |
//            processing cycles from the BPM module to the control       |
//            system.                                                    |
//                                                                       |
//                                                                       |
// After raw data from a given bunch is collected over many turns, the   |
// data is processed to produce a single instance of proc_data. This     |
// data is placed in a slot in the currently-active PROC_BUF entry.      |
// Depending on the mode of operation, the data in this array may be all |
// from the same  bunch, or it may be from various bunches as controlled |
// by the auto_sample structure.                                         |
//                                                                       |
// The struct PROC_DATA  defines the summary data from a single          |
// multi-turn measurement. The struct PROC_BUF defines an array of       |
// several circular buffers; each one holding many sets of summary data. |
//                                                                       |
// A processed data buffer (PROC_BUF) is a circular buffer. Each entry   |  
// in the buffer contains summary information related to a multi-turn    |
// measurement on a specific bunch. There can be several processed data  |
// buffers.  In that case, the instrument may write to a specific buffer |
// until it is instructed to change to a different buffer.               |
//                                                                       |
//  The 'use_segments' flag instructs the parser to generate code that   |
//  places each buffer structure instance into the appropriate memory    |
//  segment in the instrument's address space.                           |
//                                                                       |
//  The exact names of the pre-defined memory segments to use (see the   |
//  instrument code project's .LDF file) are referenced at the top of    |
//  this file in a portion of the '!!' header.                           |
//                                                                       |
//  The 'mp_space' flag controls whether or not a MULTIPROCESSOR SPACE   |
//  memory offset is needed for accessing the address space specified by |
//  the segment indicated as an argument of the 'use_segments' flag.     |
//                                                                       |
//  The flag is 'NO' in this case because the phase word buffer is       |
//  configured to exist in the SRAM installed on the digital board,      |
//  the addressing of which requires that no multiprocessor offset be    |
//  used.                                                                |
//                                                                       |
//    See description of multiprocessor space addressing in the          |
//    TigerSHARC programming reference for more detailed information.    |
//                                                                       |
//                                                                       |
// msmt_and_bun_id : NOT YET EMPLOYED                                    |
//                   Lower 2 bytes specify the measurement instance      |
//                   number.                                             |
//                   Upper 2 bytes specify the bunch bucket number for   |
//                   the buffer entry.                                   |
//                                                                       |
// data_counter    : Increments when process_data is called... Needed?   |
//                                                                       | 
// turn_counter    : Specifies the turn number of the first turn used    |
//                   for the measurement.   Needed?                      |
//                                                                       |
// signal_avg[]    : The average input signal over some number of turns  |
//                   in CBPM_SIMPLE_AVG_MODE                             |
//                          -or-                                         |
//                   The average fractional signal on each detector      |
//                   input multiplied by the mean of the sum signal in   |
//                   CBPM_JITTER_SUPPRESSION_MODE                        |
//                                                                       |
// signal_rms[]    : The RMS of each input signal.                       |
//-----------------------------------------------------------------------+
typedef struct {
      int   msmt_and_bun_id;
      int   data_counter;
      int   turn_counter;
      float signal[CBPM_MAX_CARDS];
      float signal_rms[CBPM_MAX_CARDS];
} CBPM_PROC_DATA;


typedef struct {
      CBPM_PROC_DATA proc_data[CBPM_MAX_BUNCHES];
} CBPM_PROC_BUF;




//-----------------------------------------------------------------------+
// PROC_BUF_HEADER - Used to pass information about the contents of the  |
//                   PROC_BUF structure.                                 |
//                                                                       |
//                                                                       |
// species      : Used in part to determine where data needs to be       |
//                written in the database for orbit acquisitions.        |
//                                                                       |
// write_ptr    : Used to hold the index of the most recent entry in the |
//                PROC_BUF array of PROC_DATA structures.                |
//                                                                       |
// active_buf   : Which of the potentially several processed data        |
//                buffers (PROC_BUFs) is active.                         |
//-----------------------------------------------------------------------+
typedef struct {
      int species;
      int write_ptr[CBPM_MAX_PROC_BUFS];
      int active_buf;
} CBPM_PROC_BUF_HEADER;




//-----------------------------------------------------------------------+
// PROC_SUM_DATA_BUF - Used to transfer simple signal sum results from   |
//                     any number of unique bunches in a given           |
//                     measurement                                       |
//                                                                       |
//                                                                       |
// signal_sum  :  Array of words to hold the sum of all signals for      |
//                each bunch sampled during a bunch-by-bunch current     |
//                measurement.                                           |
//                                                                       |
// fill_count  :  Holds how many times the above array has been fully    |
//                refreshed with new measurement data.                   |
//                                                                       |
// gain_values :  The gain settings employed during an acquisition       |
//-----------------------------------------------------------------------+
typedef struct {
      float signal_sum[CBPM_MAX_BUNCHES];
      int   fill_count;
      int   gain_values[CBPM_MAX_CARDS][CBPM_MAX_TIMING_BLOCKS];
} CBPM_PROC_SUM_DAT_BUF;




//-----------------------------------------------------------------------+
// PROC_BUF_IO - This struct is used to handshake between the            |
//                    control system and DSP for PROC_BUF communications |
//                    access.                                            |
//                                                                       |
//                                                                       |
// handshake  :  CTL system sets to PROC_BUF_REQUEST when it wants to    |
//               read  the next PROC_BUF.                                |
//               DSP sets to the buffer ready for CTL system reading     |
//               CTL system sets to PROC_BUF_NOREQUEST when done reading |
//-----------------------------------------------------------------------+
typedef struct {
      int handshake;
} CBPM_PROC_BUF_IO;





//-----------------------------------------------------------------------+
// SUMM_BUF - Summary data buffer  NOT USED                              |
//                                                                       |
//                                                                       |
// gain          :                                                       |
// delay         :                                                       |
// chan_delay    :                                                       |
// signal[]      : The average of each input signal.                     |
//-----------------------------------------------------------------------+
typedef struct {
      int   gain[CBPM_MAX_CARDS];
      int   delay;
      int   chan_delay;
      float signal[CBPM_MAX_CARDS];
} CBPM_SUMM_DATA;


typedef struct {
      CBPM_SUMM_DATA data[CBPM_MAX_AUTO_SAMPLES];
} CBPM_SUMM_BUF;




//-----------------------------------------------------------------------+
// SIGNAL_STAT - Signal statistics struct for a single bunch measurement |
//                                                                       |
//                                                                       |
// signal_avg  : Averages of signal samples                              |
// signal_rms  : RMS values of signal samples                            |
//-----------------------------------------------------------------------+
typedef struct {
      float signal_avg[CBPM_MAX_CARDS];
      float signal_rms[CBPM_MAX_CARDS];
} CBPM_SIGNAL_STAT;




//-----------------------------------------------------------------------+
// PHASE_CONFIG - Used to transfer betatron phase measuring parameters   |
//                                                                       |
//                                                                       |
// phase_reg_id : specifies which of the 2 phase registers should be     |
//                accessed for phase information corresponding to a      |
//                particular bunch in CESR                               | 
//      int phase_reg_id[CBI_NUM_SPECIES][CBPM_MAX_BUNCHES];             |
// phase_offset : specifies the turn difference between the arrival of   |
//                signal data and phase reg data                         |
//-----------------------------------------------------------------------+
typedef struct {
        int phase_jump_boundaries[CBI_NUM_SPECIES][CBPM_MAX_PHASE_JUMPS];
        int phase_turn_offsets[CBI_NUM_SPECIES][CBPM_MAX_PHASE_JUMPS+1];
        int phase_wait_values[CBI_NUM_SPECIES][CBPM_MAX_PHASE_JUMPS+1];
} CBPM_PHASE_CONFIG;




//-----------------------------------------------------------------------+
// BETA_PHASE_OUT- This struct is used to pass results of a single       |
//                      phase measurement from the BPM module to the     |
//                      control system.                                  |
//                                                                       |
//                                                                       |
// bunch_id        : Specifies which bunch was used for the phase        |
//                   measurement                                         |
//                                                                       |
// tot_turns       : Specifies the total number of turns used for the    |
//                   phase measurement.                                  |
//                                                                       |
// turn_ctr_offset : Turn counter offset to use for present bunch        |
//                                                                       |
// phase_results[] : Float copies of the double accumulators of sin and  |
//                   cosine data for each button, plane, and half-turn   |
//                   phase race-condition delay setting.                 |
//                                                                       |
// signal[]        : Returns the average of each button signal over the  |
//                   number of turns used in the phase measurement.      |
//-----------------------------------------------------------------------+
typedef struct {
      int   bunch_id;
      int   tot_turns;
      int   turn_ctr_offset;
      float phase_results[CBPM_NUM_DP_TURNS_OFFSET][CBPM_HALF_TURN_OPTIONS][CBPM_MAX_PHASE_DIM][CBPM_NUM_PHASE_COEFFS][CBPM_MAX_CARDS];
      float signal[CBPM_MAX_CARDS];
} CBPM_BETA_PHASE_OUT;




//-----------------------------------------------------------------------+
// FIND_DELAY_OUT - Used for delivering the results of the "find_delays" |
//                  routine.                                             |
//                                                                       |
// fcoeffs     : 3 floats per card to hold the 2nd-order polynomial      |
//               fit coefficients                                        |
//-----------------------------------------------------------------------+
typedef struct {
      int   max_block_delay;
      float fcoeffs[CBPM_MAX_FIT_COEFFS];
      float peaks[CBPM_MAX_ACQ_CONTROLLERS];      
      int offsets[CBPM_MAX_ACQ_CONTROLLERS];
      float prevADCRMSs[CBPM_MAX_ACQ_CONTROLLERS];
      float postADCRMSs[CBPM_MAX_ACQ_CONTROLLERS];
      int num_retries;      
      int numTurnsToCollectPeakData;
} CBPM_FIND_DELAY_OUT;


typedef struct {
      int offsetshist[CBPM_FIND_DELAYS_HIST_LENGTH][CBPM_MAX_ACQ_CONTROLLERS];
      float peakshist[CBPM_FIND_DELAYS_HIST_LENGTH][CBPM_MAX_ACQ_CONTROLLERS];
      int chipshist[CBPM_FIND_DELAYS_HIST_LENGTH][CBPM_MAX_ACQ_CONTROLLERS];
      int blockhist[CBPM_FIND_DELAYS_HIST_LENGTH];
      int timingUpdateIsGoodhist[CBPM_FIND_DELAYS_HIST_LENGTH];
      int rollbackhist[CBPM_FIND_DELAYS_HIST_LENGTH];
} CBPM_BFIND_DELAY_OUT;




//-----------------------------------------------------------------------+
// FIND_DELAY_PARAMS - Used to provide delay finding parameters to the   |
//                     instrument for use during a 'find_delays'         |
//                     operation.                                        |
//                                                                       |
// hist_index    :  index used for history array for find delay          |
//                  iterations                                           |
// use_ data_enable   :  whether to use data_enable for the find scan    |
//                  across the peak (can only be used for time scan,     |
//		    and time in, not autotiming, (since that probably    |
//		    already uses data enable for the main function).     |
//-----------------------------------------------------------------------+
typedef struct {
      int hist_index;
      int use_data_enable;
} CBPM_FIND_DELAY_PARAMS;




//-----------------------------------------------------------------------+
// CHAN_CAL_WORK - Holds the data and calculated error values (RMS^2) of |
//                 data window used by the fine-adjustment part of the   |
//                 peak finding routine 'find_delays'.                   |
//                                                                       |
//                                                                       |
// data  : peak fitting data values                                      |
// error : peak fitting error values                                     |
//-----------------------------------------------------------------------+
typedef struct {
      float data[CBPM_MAX_CHAN_DELAY_COUNTS];
      float error[CBPM_MAX_CHAN_DELAY_COUNTS];
} CBPM_CHAN_CAL_DATA;



typedef struct {
      CBPM_CHAN_CAL_DATA chan_cal_data[CBPM_MAX_CARDS];
} CBPM_CHAN_CAL_WORK;




//-----------------------------------------------------------------------+
// PED_CAL_OUT - Struct for holding temporary pedestal value             |
//               acquisitions at a single gain setting                   |
//                                                                       |
//                                                                       |
// ped_table    : Pedestal value table for all VARIABLE GAIN settings.   |
// ped_rms_table: Pedestal RMS table for all VARIABLE GAIN settings.     |
//-----------------------------------------------------------------------+
typedef struct {
      float ped_table[CBPM_MAX_CHANS_PER_CARD][CBPM_MAX_CARDS][CBPM_MAX_GAINS];
      float ped_rms_table[CBPM_MAX_CHANS_PER_CARD][CBPM_MAX_CARDS][CBPM_MAX_GAINS];
} CBPM_PED_CAL_OUT;




//-----------------------------------------------------------------------+
// RAW_PARAMS                                                            |
//                                                                       |
// Only used for purposes internal to the instrument?                    |
//                                                                       |
//  RAW_PARAMS : Parameters governing the collection of a raw data       |
//                    sample                                             |
//-----------------------------------------------------------------------+
typedef struct {
         int num_turns;
         int scale_mode;
         int trig_turns_delay;
         int spacex_turn;
         int use_data_enable;
         int trig_mask;
         int phase_race_wait;
} CBPM_RAW_PARAMS;




//-----------------------------------------------------------------------+
//  PROC_PARAMS: Parameters governing the collection of a processed      |
//                    data sample which consists of one or more raw data |
//                    samples                                            |
//-----------------------------------------------------------------------+
typedef struct {
      int avg_mode;
} CBPM_PROC_PARAMS;




//-----------------------------------------------------------------------+
//  CAL_PARAMS : Parameters controlling the DSP gain and timing          |
//                    calibration sequence                               |
//-----------------------------------------------------------------------+
typedef struct {
      int delay_cal;
      int gain_cal;
      int delay_init;
      int gain_xcal;
} CBPM_CAL_PARAMS;




//-----------------------------------------------------------------------+
// DIAGNOSTIC -  Sructure for passing diagnostic mode flags to the       |
//               instrument and for reading out diagnostic data feeds    |
//               for debugging/testing purposes.                         |
//                                                                       |
//                                                                       |
// pre_pf_peak_block_delays    - Used to read back delays from the point |
//     (read-back)              in the peak-finding process right before |
//                              the curve fitter is invoked.             |
//                                                                       |
// pre_pf_offset_chan_delays - "      "                                  |
//     (read-back)                                                       |
//                                                                       |
// diag_readback_address   -- address to poll continuously in the diag   |
//                            readback loop command on the DSP           |
//                                                                       |
// diag_readback_loops     -- number of reads to perform in diag readback|
//                                                                       |
// diag_readback_loopwait  -- value of magic_wait() to use in every      |
//                            diag readback loop iteration.              |
//                                                                       |
// diag_readback_buffer[2][500] - buffer to allow reading back of 500    |
//                                copies of two separate memory locations|
//                                                                       |
// test_step_index          -- the index of the step that test was       |
//                             performed on                              |
//-----------------------------------------------------------------------+
typedef struct {
      int   pre_pf_peak_block_delays[CBPM_MAX_ACQ_CONTROLLERS];
      int   pre_pf_offset_chan_delays[CBPM_MAX_ACQ_CONTROLLERS];
      int   scrub_value;
      int   sample_at_zero_crossing;
      int   magic_wait_calibration_value;
      int   test_step_index;
} CBPM_DIAGNOSTIC;



//-----------------------------------------------------------------------+
// TEST_PARAMS_STRUCT - structure containing parameters needed for       |
//                      success/warn/fail test                           |
//                                                                       |
// type                    -- type of test, CBPM_TEST_TYPE in            |
//                            in include/cbpm_constants.h                |
//                                                                       |
// error_thresholds        -- threshold past which the test returns error|
//                                                                       |
// warning_thresholds      -- threshold past which the test returns warn |
//                                                                       |
// enable                  -- flag to enable running of test             |
//                                                                       |
// required_for_update_acceptance -- select if test is required in order |
//                        to allow timing update                         |
//-----------------------------------------------------------------------+
typedef struct {
      int     type;
      float   error_threshold;
      float   warning_threshold;
      int     enable;
      int     required_for_update_acceptance;      
} CBPM_TEST_PARAMS_STRUCT;




//-----------------------------------------------------------------------+
// CODE_PARAMS -  Structure for passing test threshold levels and flags  |
//                to control code execution                              |
//                                                                       |
//                                                                       |
// tests                   -- holds parameters for various tests         |
//                                                                       |
// execution_flags         -- conditional branching based on test results|
//-----------------------------------------------------------------------+
typedef struct {
      CBPM_TEST_PARAMS_STRUCT tests[CBPM_NUM_TESTS];
      int     execution_flags[CBPM_MAX_NUM_EXECUTION_FLAGS];
} CBPM_CODE_PARAMS;




//-----------------------------------------------------------------------+
// TEST_RESULTS - Structure for passing back the results of the          |
//                success/warn/fail tests                                |
//                                                                       |
//                                                                       |
// tests                   -- holds parameters for various tests         |
//                                                                       |
// execution_flags         -- conditional branching based on test results|
//-----------------------------------------------------------------------+
typedef struct {
      int EncodedStatus[CBPM_NUM_TESTS_ENCODED];
      int Statuses[CBPM_NUM_TESTS][CBPM_MAX_ACQ_CONTROLLERS];
} CBPM_TEST_RESULTS;


typedef struct {
      int Statuseshist[CBPM_FIND_DELAYS_HIST_LENGTH][CBPM_NUM_TESTS][CBPM_MAX_ACQ_CONTROLLERS];
      float StatusVals[CBPM_FIND_DELAYS_HIST_LENGTH][CBPM_NUM_TESTS][CBPM_MAX_ACQ_CONTROLLERS];
      int statushist[CBPM_FIND_DELAYS_HIST_LENGTH];      
} CBPM_BTEST_RESULTS;

typedef struct {
      CBPM_CMD_PARAMS                 cbpm_cmd_params;
      CBPM_TEMPERATURES               cbpm_temperatures;
      CBPM_TIMING_CONFIG              cbpm_timing_config;
      CBPM_GAIN_CONFIG                cbpm_gain_config;
      CBPM_PEDESTAL_CONFIG            cbpm_pedestal_config;
      CBPM_OP_TIMING                  cbpm_op_timing;
      CBPM_OP_GAIN                    cbpm_op_gain;
      CBPM_RAW_DATA_HEADER            cbpm_raw_data_header;
      CBPM_ADC_BUFFER                 cbpm_adc_buffer0;
      CBPM_ADC_BUFFER                 cbpm_adc_buffer1;
      CBPM_ADC_BUFFER                 cbpm_adc_buffer2;
      CBPM_ADC_BUFFER                 cbpm_adc_buffer3;
      CBPM_ADC_BUFFER                 cbpm_adc_buffer4;
      CBPM_ADC_BUFFER                 cbpm_adc_buffer5;
      CBPM_ADC_BUFFER                 cbpm_adc_buffer6;
      CBPM_ADC_BUFFER                 cbpm_adc_buffer7;
      CBPM_PH_WORD_BUF                cbpm_ph_word_buf;
      CBPM_PROC_BUF                   cbpm_proc_buf;
      CBPM_PROC_BUF_HEADER            cbpm_proc_buf_header;
      CBPM_PROC_SUM_DAT_BUF           cbpm_proc_sum_dat_buf;
      CBPM_PROC_BUF_IO                cbpm_proc_buf_io;
      CBPM_SUMM_BUF                   cbpm_summ_buf;
      CBPM_SIGNAL_STAT                cbpm_signal_stat;
      CBPM_PHASE_CONFIG               cbpm_phase_config;
      CBPM_BETA_PHASE_OUT             cbpm_beta_phase_out;
      CBPM_FIND_DELAY_OUT             cbpm_find_delay_out;
      CBPM_BFIND_DELAY_OUT            cbpm_bfind_delay_out;
      CBPM_FIND_DELAY_PARAMS          cbpm_find_delay_params;
      CBPM_CHAN_CAL_WORK              cbpm_chan_cal_work;
      CBPM_PED_CAL_OUT                cbpm_ped_cal_out;
      CBPM_RAW_PARAMS                 cbpm_raw_params;
      CBPM_PROC_PARAMS                cbpm_proc_params;
      CBPM_CAL_PARAMS                 cbpm_cal_params;
      CBPM_DIAGNOSTIC                 cbpm_diagnostic;
      CBPM_CODE_PARAMS                cbpm_code_params;
      CBPM_TEST_RESULTS               cbpm_test_results;
      CBPM_BTEST_RESULTS              cbpm_btest_results;
} CBPM_DATA;

#if defined (__cplusplus)
}
#endif


#endif //...types_H
